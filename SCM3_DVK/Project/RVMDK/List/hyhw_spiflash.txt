; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\hyhw_spiflash.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\hyhw_spiflash.d --feedback=.\Obj\output.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Source\inc -I..\..\Driver\inc -IE:\00_Workspace\0608_AG16KSDE176_DemoBoard\SCM3_DVK\Project\RVMDK\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0 -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=513 -DARMCM3 --omf_browse=.\obj\hyhw_spiflash.crf ..\..\Driver\src\hyhw_SpiFlash.c]
                          THUMB

                          AREA ||i.hyhwSpiFlash_EraseSector||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_EraseSector PROC
;;;109      */
;;;110    void hyhwSpiFlash_EraseSector(UInt32 SectorAddr)
000000  b530              PUSH     {r4,r5,lr}
;;;111    {
000002  4602              MOV      r2,r0
;;;112      U8 Byte1,Byte2,Byte3;
;;;113    	/*!< Send write enable instruction */
;;;114      hyhwSpiFlash_WriteEnable();
000004  f7fffffe          BL       hyhwSpiFlash_WriteEnable
;;;115    
;;;116      /*!< Sector Erase */
;;;117      /*!< Select the FLASH: Chip Select low */
;;;118      //sFLASH_CS_LOW();
;;;119      /*!< Send Sector Erase instruction */
;;;120    	SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|4<<8; //
000008  f44f6080          MOV      r0,#0x400
00000c  490e              LDR      r1,|L1.72|
00000e  6108              STR      r0,[r1,#0x10]
;;;121    	Byte1 = 0xFF&(SectorAddr>>16);
000010  f3c24307          UBFX     r3,r2,#16,#8
;;;122    	Byte2 = 0xFF&(SectorAddr>>8);
000014  f3c22407          UBFX     r4,r2,#8,#8
;;;123    	Byte3 = 0xFF&(SectorAddr);
000018  b2d5              UXTB     r5,r2
;;;124    	SPI_FLASH->PHASE_DATA[0] = (sFLASH_CMD_SE)|(Byte1<<8)|(Byte2<<16)|(Byte3<<24);
00001a  2020              MOVS     r0,#0x20
00001c  ea402003          ORR      r0,r0,r3,LSL #8
000020  ea404004          ORR      r0,r0,r4,LSL #16
000024  ea406005          ORR      r0,r0,r5,LSL #24
000028  6308              STR      r0,[r1,#0x30]
;;;125    	
;;;126    	SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT1|SPI_LE_MODE;
00002a  f2444001          MOV      r0,#0x4401
00002e  6008              STR      r0,[r1,#0]
;;;127    	while(!(SPI_FLASH->SPCR & SPIF_DONE));
000030  bf00              NOP      
                  |L1.50|
000032  4805              LDR      r0,|L1.72|
000034  6800              LDR      r0,[r0,#0]
000036  f0000002          AND      r0,r0,#2
00003a  2800              CMP      r0,#0
00003c  d0f9              BEQ      |L1.50|
;;;128    	 
;;;129      /*!< Deselect the FLASH: Chip Select high */
;;;130      //sFLASH_CS_HIGH();
;;;131    
;;;132      /*!< Wait the end of Flash writing */
;;;133      hyhwSpiFlash_WaitForWriteEnd();
00003e  f7fffffe          BL       hyhwSpiFlash_WaitForWriteEnd
;;;134    	
;;;135    	hyhwSpiFlash_WriteDisable();
000042  f7fffffe          BL       hyhwSpiFlash_WriteDisable
;;;136    }
000046  bd30              POP      {r4,r5,pc}
;;;137    
                          ENDP

                  |L1.72|
                          DCD      0x40018000

                          AREA ||i.hyhwSpiFlash_Init||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_Init PROC
;;;91       */
;;;92     void hyhwSpiFlash_Init(void)
000000  b510              PUSH     {r4,lr}
;;;93     {
;;;94     		U32 i;
;;;95     		SPI_FLASH->SPCR  |= SPIF_RESET;
000002  480c              LDR      r0,|L2.52|
000004  6800              LDR      r0,[r0,#0]
000006  f0404000          ORR      r0,r0,#0x80000000
00000a  490a              LDR      r1,|L2.52|
00000c  6008              STR      r0,[r1,#0]
;;;96     		for(i=0;i<1000;i++);
00000e  2400              MOVS     r4,#0
000010  e000              B        |L2.20|
                  |L2.18|
000012  1c64              ADDS     r4,r4,#1
                  |L2.20|
000014  f5b47f7a          CMP      r4,#0x3e8
000018  d3fb              BCC      |L2.18|
;;;97     		SPI_FLASH->SPCR  &= ~SPIF_RESET;
00001a  4806              LDR      r0,|L2.52|
00001c  6800              LDR      r0,[r0,#0]
00001e  f0204000          BIC      r0,r0,#0x80000000
000022  4904              LDR      r1,|L2.52|
000024  6008              STR      r0,[r1,#0]
;;;98     		SPI_FLASH->SPCR = 
000026  f44f4088          MOV      r0,#0x4400
00002a  6008              STR      r0,[r1,#0]
;;;99     										FLASH_CLK_DIV | 	// 分频
;;;100                        SPIF_LSB_EN;			//小端模式    
;;;101    		hyhwDMAC_Init();
00002c  f7fffffe          BL       hyhwDMAC_Init
;;;102    	
;;;103    }
000030  bd10              POP      {r4,pc}
;;;104    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40018000

                          AREA ||i.hyhwSpiFlash_Read||, CODE, READONLY, ALIGN=1

                  hyhwSpiFlash_Read PROC
;;;47     // 注意 READ的时候用到了DMA，读写长度务必是4的倍数，否则可能会导致buf溢出。
;;;48     void hyhwSpiFlash_Read( UInt8* str,UInt32 addr, UInt32 len )
000000  b570              PUSH     {r4-r6,lr}
;;;49     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;50         hyhwSpiFlash_ReadBuffer(str, addr, len);
000008  b2a2              UXTH     r2,r4
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       hyhwSpiFlash_ReadBuffer
;;;51     }
000012  bd70              POP      {r4-r6,pc}
;;;52     UInt8 flashBufP[FLASH_SECTOR_SIZE];
                          ENDP


                          AREA ||i.hyhwSpiFlash_ReadBuffer||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_ReadBuffer PROC
;;;191      */
;;;192    void hyhwSpiFlash_ReadBuffer(UInt8* pBuffer, UInt32 ReadAddr, UInt16 NumByteToRead)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;193    {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
;;;194      U8 Byte1,Byte2,Byte3; 
;;;195    	if(NumByteToRead > FLASH_SECTOR_SIZE)
00000c  f5b55f80          CMP      r5,#0x1000
000010  dd02              BLE      |L4.24|
                  |L4.18|
;;;196    		return;
;;;197    	
;;;198    	if(NumByteToRead < 4096)
;;;199    	{
;;;200    		SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|4<<8; //???? 2??
;;;201    		Byte1 = 0xFF&(ReadAddr>>16);
;;;202    		Byte2 = 0xFF&(ReadAddr>>8);
;;;203    		Byte3 = 0xFF&(ReadAddr);
;;;204    		SPI_FLASH->PHASE_DATA[0] = (sFLASH_CMD_READ)|(Byte1<<8)|(Byte2<<16)|(Byte3<<24);
;;;205    		SPI_FLASH->PHASE_CTRL[1] = SPIF_PHASE_ACTION_RX | SPIF_MODE_SINGLE|(NumByteToRead&0xfff)<<8; //最多只能配置小于4096个
;;;206    	
;;;207    		hyhwDma_Config(DMA_CHANNEL1,(U32)(&(SPI_FLASH->PHASE_DATA[1])),(U32)pBuffer,NumByteToRead,DMA_SNI,DMA_DI,DMA_WIDTH_32_BIT,DMA_WIDTH_8_BIT,DMA_PERIPHERAL_TO_MEM_PERIPHERAL_CTRL);
;;;208    	
;;;209    		SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT2|SPI_LE_MODE|SPIF_USE_DMA_EN;
;;;210    		while(!(SPI_FLASH->SPCR & SPIF_DONE));
;;;211    	}
;;;212    	else
;;;213    	{
;;;214    		SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|4<<8; //???? 2??
;;;215    		Byte1 = 0xFF&(ReadAddr>>16);
;;;216    		Byte2 = 0xFF&(ReadAddr>>8);
;;;217    		Byte3 = 0xFF&(ReadAddr);
;;;218    		SPI_FLASH->PHASE_DATA[0] = (sFLASH_CMD_READ)|(Byte1<<8)|(Byte2<<16)|(Byte3<<24);
;;;219    		SPI_FLASH->PHASE_CTRL[1] = SPIF_PHASE_ACTION_RX | SPIF_MODE_SINGLE|(2048)<<8; //最多只能配置小于4096个
;;;220    	
;;;221    		hyhwDma_Config(DMA_CHANNEL1,(U32)(&(SPI_FLASH->PHASE_DATA[1])),(U32)pBuffer,2048,DMA_SNI,DMA_DI,DMA_WIDTH_32_BIT,DMA_WIDTH_8_BIT,DMA_PERIPHERAL_TO_MEM_PERIPHERAL_CTRL);
;;;222    	
;;;223    		SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT2|SPI_LE_MODE|SPIF_USE_DMA_EN;
;;;224    		while(!(SPI_FLASH->SPCR & SPIF_DONE));
;;;225    		//读另一半
;;;226    		SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|4<<8; 
;;;227    		ReadAddr = ReadAddr +2048;
;;;228    		Byte1 = 0xFF&(ReadAddr>>16);
;;;229    		Byte2 = 0xFF&(ReadAddr>>8);
;;;230    		Byte3 = 0xFF&(ReadAddr);
;;;231    		SPI_FLASH->PHASE_DATA[0] = (sFLASH_CMD_READ)|(Byte1<<8)|(Byte2<<16)|(Byte3<<24);
;;;232    		SPI_FLASH->PHASE_CTRL[1] = SPIF_PHASE_ACTION_RX | SPIF_MODE_SINGLE|(NumByteToRead-2048)<<8; //最多只能配置小于4096个
;;;233    	
;;;234    		hyhwDma_Config(DMA_CHANNEL1,(U32)(&(SPI_FLASH->PHASE_DATA[1])),(U32)(pBuffer+2048),(NumByteToRead-2048),DMA_SNI,DMA_DI,DMA_WIDTH_32_BIT,DMA_WIDTH_8_BIT,DMA_PERIPHERAL_TO_MEM_PERIPHERAL_CTRL);
;;;235    	
;;;236    		SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT2|SPI_LE_MODE|SPIF_USE_DMA_EN;
;;;237    		while(!(SPI_FLASH->SPCR & SPIF_DONE));
;;;238    		
;;;239    	}
;;;240    	
;;;241    }
000012  b005              ADD      sp,sp,#0x14
000014  e8bd83f0          POP      {r4-r9,pc}
                  |L4.24|
000018  f5b55f80          CMP      r5,#0x1000            ;198
00001c  da34              BGE      |L4.136|
00001e  f44f6080          MOV      r0,#0x400             ;200
000022  494e              LDR      r1,|L4.348|
000024  6108              STR      r0,[r1,#0x10]         ;200
000026  f3c44607          UBFX     r6,r4,#16,#8          ;201
00002a  f3c42707          UBFX     r7,r4,#8,#8           ;202
00002e  f00408ff          AND      r8,r4,#0xff           ;203
000032  2003              MOVS     r0,#3                 ;204
000034  ea402006          ORR      r0,r0,r6,LSL #8       ;204
000038  ea404007          ORR      r0,r0,r7,LSL #16      ;204
00003c  ea406008          ORR      r0,r0,r8,LSL #24      ;204
000040  6308              STR      r0,[r1,#0x30]         ;204
000042  f3c5000b          UBFX     r0,r5,#0,#12          ;205
000046  2120              MOVS     r1,#0x20              ;205
000048  ea412100          ORR      r1,r1,r0,LSL #8       ;205
00004c  4843              LDR      r0,|L4.348|
00004e  6141              STR      r1,[r0,#0x14]         ;205
000050  2006              MOVS     r0,#6                 ;207
000052  2100              MOVS     r1,#0                 ;207
000054  2202              MOVS     r2,#2                 ;207
000056  2301              MOVS     r3,#1                 ;207
000058  e9cd2102          STRD     r2,r1,[sp,#8]         ;207
00005c  e9cd1300          STRD     r1,r3,[sp,#0]         ;207
000060  9004              STR      r0,[sp,#0x10]         ;207
000062  462b              MOV      r3,r5                 ;207
000064  464a              MOV      r2,r9                 ;207
000066  493d              LDR      r1,|L4.348|
000068  3134              ADDS     r1,r1,#0x34           ;207
00006a  2001              MOVS     r0,#1                 ;207
00006c  f7fffffe          BL       hyhwDma_Config
000070  f2445011          MOV      r0,#0x4511            ;209
000074  4939              LDR      r1,|L4.348|
000076  6008              STR      r0,[r1,#0]            ;209
000078  bf00              NOP                            ;210
                  |L4.122|
00007a  4838              LDR      r0,|L4.348|
00007c  6800              LDR      r0,[r0,#0]            ;210
00007e  f0000002          AND      r0,r0,#2              ;210
000082  2800              CMP      r0,#0                 ;210
000084  d0f9              BEQ      |L4.122|
000086  e067              B        |L4.344|
                  |L4.136|
000088  f44f6080          MOV      r0,#0x400             ;214
00008c  4933              LDR      r1,|L4.348|
00008e  6108              STR      r0,[r1,#0x10]         ;214
000090  f3c44607          UBFX     r6,r4,#16,#8          ;215
000094  f3c42707          UBFX     r7,r4,#8,#8           ;216
000098  f00408ff          AND      r8,r4,#0xff           ;217
00009c  2003              MOVS     r0,#3                 ;218
00009e  ea402006          ORR      r0,r0,r6,LSL #8       ;218
0000a2  ea404007          ORR      r0,r0,r7,LSL #16      ;218
0000a6  ea406008          ORR      r0,r0,r8,LSL #24      ;218
0000aa  6308              STR      r0,[r1,#0x30]         ;218
0000ac  492c              LDR      r1,|L4.352|
0000ae  482b              LDR      r0,|L4.348|
0000b0  6141              STR      r1,[r0,#0x14]         ;219
0000b2  2006              MOVS     r0,#6                 ;221
0000b4  2100              MOVS     r1,#0                 ;221
0000b6  2202              MOVS     r2,#2                 ;221
0000b8  2301              MOVS     r3,#1                 ;221
0000ba  e9cd2102          STRD     r2,r1,[sp,#8]         ;221
0000be  e9cd1300          STRD     r1,r3,[sp,#0]         ;221
0000c2  9004              STR      r0,[sp,#0x10]         ;221
0000c4  0293              LSLS     r3,r2,#10             ;221
0000c6  464a              MOV      r2,r9                 ;221
0000c8  4924              LDR      r1,|L4.348|
0000ca  3134              ADDS     r1,r1,#0x34           ;221
0000cc  2001              MOVS     r0,#1                 ;221
0000ce  f7fffffe          BL       hyhwDma_Config
0000d2  f2445011          MOV      r0,#0x4511            ;223
0000d6  4921              LDR      r1,|L4.348|
0000d8  6008              STR      r0,[r1,#0]            ;223
0000da  bf00              NOP                            ;224
                  |L4.220|
0000dc  481f              LDR      r0,|L4.348|
0000de  6800              LDR      r0,[r0,#0]            ;224
0000e0  f0000002          AND      r0,r0,#2              ;224
0000e4  2800              CMP      r0,#0                 ;224
0000e6  d0f9              BEQ      |L4.220|
0000e8  f44f6080          MOV      r0,#0x400             ;226
0000ec  491b              LDR      r1,|L4.348|
0000ee  6108              STR      r0,[r1,#0x10]         ;226
0000f0  f5046400          ADD      r4,r4,#0x800          ;227
0000f4  f3c44607          UBFX     r6,r4,#16,#8          ;228
0000f8  f3c42707          UBFX     r7,r4,#8,#8           ;229
0000fc  f00408ff          AND      r8,r4,#0xff           ;230
000100  2003              MOVS     r0,#3                 ;231
000102  ea402006          ORR      r0,r0,r6,LSL #8       ;231
000106  ea404007          ORR      r0,r0,r7,LSL #16      ;231
00010a  ea406008          ORR      r0,r0,r8,LSL #24      ;231
00010e  6308              STR      r0,[r1,#0x30]         ;231
000110  f5a56000          SUB      r0,r5,#0x800          ;232
000114  2120              MOVS     r1,#0x20              ;232
000116  ea412100          ORR      r1,r1,r0,LSL #8       ;232
00011a  4810              LDR      r0,|L4.348|
00011c  6141              STR      r1,[r0,#0x14]         ;232
00011e  2006              MOVS     r0,#6                 ;234
000120  2100              MOVS     r1,#0                 ;234
000122  2202              MOVS     r2,#2                 ;234
000124  2301              MOVS     r3,#1                 ;234
000126  e9cd2102          STRD     r2,r1,[sp,#8]         ;234
00012a  e9cd1300          STRD     r1,r3,[sp,#0]         ;234
00012e  9004              STR      r0,[sp,#0x10]         ;234
000130  f5a56300          SUB      r3,r5,#0x800          ;234
000134  f5096200          ADD      r2,r9,#0x800          ;234
000138  4908              LDR      r1,|L4.348|
00013a  3134              ADDS     r1,r1,#0x34           ;234
00013c  2001              MOVS     r0,#1                 ;234
00013e  f7fffffe          BL       hyhwDma_Config
000142  f2445011          MOV      r0,#0x4511            ;236
000146  4905              LDR      r1,|L4.348|
000148  6008              STR      r0,[r1,#0]            ;236
00014a  bf00              NOP                            ;237
                  |L4.332|
00014c  4803              LDR      r0,|L4.348|
00014e  6800              LDR      r0,[r0,#0]            ;237
000150  f0000002          AND      r0,r0,#2              ;237
000154  2800              CMP      r0,#0                 ;237
000156  d0f9              BEQ      |L4.332|
                  |L4.344|
000158  bf00              NOP      
00015a  e75a              B        |L4.18|
;;;242    
                          ENDP

                  |L4.348|
                          DCD      0x40018000
                  |L4.352|
                          DCD      0x00080020

                          AREA ||i.hyhwSpiFlash_ReadID||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_ReadID PROC
;;;247      */
;;;248    UInt32 hyhwSpiFlash_ReadID(void)
000000  f44f7180          MOV      r1,#0x100
;;;249    {
;;;250      UInt32 id;
;;;251    	SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|1<<8; //
000004  4a0a              LDR      r2,|L5.48|
000006  6111              STR      r1,[r2,#0x10]
;;;252    	SPI_FLASH->PHASE_DATA[0] = sFLASH_CMD_RDID;
000008  219f              MOVS     r1,#0x9f
00000a  6311              STR      r1,[r2,#0x30]
;;;253    	SPI_FLASH->PHASE_CTRL[1] = SPIF_PHASE_ACTION_RX | SPIF_MODE_SINGLE|3<<8; //???? 4??
00000c  f44f7248          MOV      r2,#0x320
000010  4907              LDR      r1,|L5.48|
000012  614a              STR      r2,[r1,#0x14]
;;;254    	
;;;255    	SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT2|SPI_LE_MODE;
000014  f2444111          MOV      r1,#0x4411
000018  4a05              LDR      r2,|L5.48|
00001a  6011              STR      r1,[r2,#0]
;;;256    	while(!(SPI_FLASH->SPCR & SPIF_DONE));
00001c  bf00              NOP      
                  |L5.30|
00001e  4904              LDR      r1,|L5.48|
000020  6809              LDR      r1,[r1,#0]
000022  f0010102          AND      r1,r1,#2
000026  2900              CMP      r1,#0
000028  d0f9              BEQ      |L5.30|
;;;257    	
;;;258    	id = SPI_FLASH->PHASE_DATA[1];
00002a  4901              LDR      r1,|L5.48|
00002c  6b48              LDR      r0,[r1,#0x34]
;;;259    	return id;
;;;260    }
00002e  4770              BX       lr
;;;261    
                          ENDP

                  |L5.48|
                          DCD      0x40018000

                          AREA ||i.hyhwSpiFlash_ReadUniqueID||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_ReadUniqueID PROC
;;;266      */
;;;267    void hyhwSpiFlash_ReadUniqueID(unsigned char *pUID)
000000  b510              PUSH     {r4,lr}
;;;268    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;269      UInt32 id;
;;;270    	SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|4<<8; //
000006  f44f6080          MOV      r0,#0x400
00000a  4915              LDR      r1,|L6.96|
00000c  6108              STR      r0,[r1,#0x10]
;;;271    	SPI_FLASH->PHASE_DATA[0] = sFLASH_CMD_RDUID|0xFFFFFF00;
00000e  f06f00b4          MVN      r0,#0xb4
000012  6308              STR      r0,[r1,#0x30]
;;;272    	SPI_FLASH->PHASE_CTRL[1] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|1<<8; //
000014  1589              ASRS     r1,r1,#22
000016  4812              LDR      r0,|L6.96|
000018  6141              STR      r1,[r0,#0x14]
;;;273    	SPI_FLASH->PHASE_DATA[1] = 0xFF;
00001a  21ff              MOVS     r1,#0xff
00001c  6341              STR      r1,[r0,#0x34]
;;;274    	
;;;275    	SPI_FLASH->PHASE_CTRL[2] = SPIF_PHASE_ACTION_RX | SPIF_MODE_SINGLE|(16)<<8; //最多只能配置小于4096个
00001e  f44f5181          MOV      r1,#0x1020
000022  6181              STR      r1,[r0,#0x18]
;;;276    	
;;;277    	hyhwDma_Config(DMA_CHANNEL1,(U32)(&(SPI_FLASH->PHASE_DATA[2])),(U32)pUID,16,DMA_SNI,DMA_DI,DMA_WIDTH_32_BIT,DMA_WIDTH_8_BIT,DMA_PERIPHERAL_TO_MEM_PERIPHERAL_CTRL);
000024  2006              MOVS     r0,#6
000026  2100              MOVS     r1,#0
000028  2202              MOVS     r2,#2
00002a  2301              MOVS     r3,#1
00002c  e9cd2102          STRD     r2,r1,[sp,#8]
000030  e9cd1300          STRD     r1,r3,[sp,#0]
000034  9004              STR      r0,[sp,#0x10]
000036  2310              MOVS     r3,#0x10
000038  4622              MOV      r2,r4
00003a  4909              LDR      r1,|L6.96|
00003c  3138              ADDS     r1,r1,#0x38
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       hyhwDma_Config
;;;278    	
;;;279    	SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT3|SPI_LE_MODE|SPIF_USE_DMA_EN;
000044  f2445021          MOV      r0,#0x4521
000048  4905              LDR      r1,|L6.96|
00004a  6008              STR      r0,[r1,#0]
;;;280    	while(!(SPI_FLASH->SPCR & SPIF_DONE));
00004c  bf00              NOP      
                  |L6.78|
00004e  4804              LDR      r0,|L6.96|
000050  6800              LDR      r0,[r0,#0]
000052  f0000002          AND      r0,r0,#2
000056  2800              CMP      r0,#0
000058  d0f9              BEQ      |L6.78|
;;;281    	return ;
;;;282    }
00005a  b006              ADD      sp,sp,#0x18
00005c  bd10              POP      {r4,pc}
;;;283    
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      0x40018000

                          AREA ||i.hyhwSpiFlash_WaitForWriteEnd||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_WaitForWriteEnd PROC
;;;325      */
;;;326    void hyhwSpiFlash_WaitForWriteEnd(void)
000000  f44f7080          MOV      r0,#0x100
;;;327    {
;;;328    
;;;329      /*!< Select the FLASH: Chip Select low */
;;;330      //sFLASH_CS_LOW();
;;;331    
;;;332      /*!< Send "Read Status Register" instruction */
;;;333      SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|1<<8; //
000004  490a              LDR      r1,|L7.48|
000006  6108              STR      r0,[r1,#0x10]
;;;334    	SPI_FLASH->PHASE_DATA[0] = sFLASH_CMD_RDSR;
000008  2005              MOVS     r0,#5
00000a  6308              STR      r0,[r1,#0x30]
;;;335    	SPI_FLASH->PHASE_CTRL[1] = SPIF_PHASE_ACTION_POLL | SPIF_MODE_SINGLE; //???? 4??
00000c  2130              MOVS     r1,#0x30
00000e  4808              LDR      r0,|L7.48|
000010  6141              STR      r1,[r0,#0x14]
;;;336    	SPI_FLASH->PHASE_DATA[1] = (0x00<<24)|(sFLASH_WIP_FLAG<<16)|(0<<8);
000012  f44f3180          MOV      r1,#0x10000
000016  6341              STR      r1,[r0,#0x34]
;;;337    	SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT2|SPI_LE_MODE;
000018  f2444011          MOV      r0,#0x4411
00001c  4904              LDR      r1,|L7.48|
00001e  6008              STR      r0,[r1,#0]
;;;338    	while(!(SPI_FLASH->SPCR & SPIF_DONE));
000020  bf00              NOP      
                  |L7.34|
000022  4803              LDR      r0,|L7.48|
000024  6800              LDR      r0,[r0,#0]
000026  f0000002          AND      r0,r0,#2
00002a  2800              CMP      r0,#0
00002c  d0f9              BEQ      |L7.34|
;;;339    
;;;340      /*!< Deselect the FLASH: Chip Select high */
;;;341      //sFLASH_CS_HIGH();
;;;342    }
00002e  4770              BX       lr
;;;343    
                          ENDP

                  |L7.48|
                          DCD      0x40018000

                          AREA ||i.hyhwSpiFlash_Write||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_Write PROC
;;;52     UInt8 flashBufP[FLASH_SECTOR_SIZE];
;;;53     void hyhwSpiFlash_Write( UInt8* str, UInt32 addr, UInt32 len )
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;54     {
000004  4683              MOV      r11,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;55     	UInt32 totalWriteCnt;
;;;56     	UInt32 flashSectorAddr;
;;;57     	UInt32 flashWriteOffset;
;;;58     	UInt32 subWriteCnt;
;;;59     	
;;;60     	UInt8 i;
;;;61     	totalWriteCnt = 0;
00000a  2400              MOVS     r4,#0
;;;62     
;;;63     	while( totalWriteCnt < len )
00000c  e036              B        |L8.124|
                  |L8.14|
;;;64     	{
;;;65     		flashSectorAddr = addr / FLASH_SECTOR_SIZE;
00000e  0b2f              LSRS     r7,r5,#12
;;;66     		flashSectorAddr *= FLASH_SECTOR_SIZE;
000010  033f              LSLS     r7,r7,#12
;;;67     		flashWriteOffset = addr % FLASH_SECTOR_SIZE;
000012  f3c5080b          UBFX     r8,r5,#0,#12
;;;68     		subWriteCnt = (len-totalWriteCnt) < (FLASH_SECTOR_SIZE - flashWriteOffset)?(len-totalWriteCnt):(FLASH_SECTOR_SIZE - flashWriteOffset);
000016  1b30              SUBS     r0,r6,r4
000018  f5c85180          RSB      r1,r8,#0x1000
00001c  4288              CMP      r0,r1
00001e  d201              BCS      |L8.36|
000020  1b30              SUBS     r0,r6,r4
000022  e001              B        |L8.40|
                  |L8.36|
000024  f5c85080          RSB      r0,r8,#0x1000
                  |L8.40|
000028  4682              MOV      r10,r0
;;;69     
;;;70     		hyhwSpiFlash_ReadBuffer(flashBufP, flashSectorAddr, FLASH_SECTOR_SIZE);	
00002a  f44f5280          MOV      r2,#0x1000
00002e  4639              MOV      r1,r7
000030  4814              LDR      r0,|L8.132|
000032  f7fffffe          BL       hyhwSpiFlash_ReadBuffer
;;;71     		memcpy(flashBufP+flashWriteOffset,str+totalWriteCnt, subWriteCnt);
000036  eb0b0104          ADD      r1,r11,r4
00003a  4a12              LDR      r2,|L8.132|
00003c  eb020008          ADD      r0,r2,r8
000040  4652              MOV      r2,r10
000042  f7fffffe          BL       __aeabi_memcpy
;;;72     		hyhwSpiFlash_EraseSector(flashSectorAddr);
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       hyhwSpiFlash_EraseSector
;;;73     		for(i=0;i<FLASH_PAGE_NUM_PER_SECTOR;i++)
00004c  f04f0900          MOV      r9,#0
000050  e00f              B        |L8.114|
                  |L8.82|
;;;74     		{
;;;75     			hyhwSpiFlash_WritePage(flashBufP+(FLASH_PAGE_SIZE*i), (flashSectorAddr+FLASH_PAGE_SIZE*i), FLASH_PAGE_SIZE);
000052  f44f7280          MOV      r2,#0x100
000056  fb027109          MLA      r1,r2,r9,r7
00005a  4a0a              LDR      r2,|L8.132|
00005c  f44f7380          MOV      r3,#0x100
000060  fb032009          MLA      r0,r3,r9,r2
000064  461a              MOV      r2,r3
000066  f7fffffe          BL       hyhwSpiFlash_WritePage
00006a  f1090001          ADD      r0,r9,#1              ;73
00006e  f00009ff          AND      r9,r0,#0xff           ;73
                  |L8.114|
000072  f1b90f10          CMP      r9,#0x10              ;73
000076  dbec              BLT      |L8.82|
;;;76     		}
;;;77     		totalWriteCnt += subWriteCnt;
000078  4454              ADD      r4,r4,r10
;;;78     		addr += subWriteCnt;
00007a  4455              ADD      r5,r5,r10
                  |L8.124|
00007c  42b4              CMP      r4,r6                 ;63
00007e  d3c6              BCC      |L8.14|
;;;79     	}
;;;80     
;;;81     	return;	
;;;82     }
000080  e8bd9ff0          POP      {r4-r12,pc}
;;;83     
                          ENDP

                  |L8.132|
                          DCD      flashBufP

                          AREA ||i.hyhwSpiFlash_WriteDisable||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_WriteDisable PROC
;;;306      */
;;;307    void hyhwSpiFlash_WriteDisable(void)
000000  f44f7080          MOV      r0,#0x100
;;;308    {
;;;309      /*!< Select the FLASH: Chip Select low */
;;;310      //sFLASH_CS_LOW();
;;;311    
;;;312      /*!< Send "Write Enable" instruction */
;;;313      SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|1<<8; //
000004  4907              LDR      r1,|L9.36|
000006  6108              STR      r0,[r1,#0x10]
;;;314    	SPI_FLASH->PHASE_DATA[0] = sFLASH_CMD_WRDIS;
000008  2004              MOVS     r0,#4
00000a  6308              STR      r0,[r1,#0x30]
;;;315    	SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT1|SPI_LE_MODE;
00000c  f2444001          MOV      r0,#0x4401
000010  6008              STR      r0,[r1,#0]
;;;316    	while(!(SPI_FLASH->SPCR & SPIF_DONE));
000012  bf00              NOP      
                  |L9.20|
000014  4803              LDR      r0,|L9.36|
000016  6800              LDR      r0,[r0,#0]
000018  f0000002          AND      r0,r0,#2
00001c  2800              CMP      r0,#0
00001e  d0f9              BEQ      |L9.20|
;;;317      /*!< Deselect the FLASH: Chip Select high */
;;;318      //sFLASH_CS_HIGH();
;;;319    }
000020  4770              BX       lr
;;;320    /**
                          ENDP

000022  0000              DCW      0x0000
                  |L9.36|
                          DCD      0x40018000

                          AREA ||i.hyhwSpiFlash_WriteEnable||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_WriteEnable PROC
;;;288      */
;;;289    void hyhwSpiFlash_WriteEnable(void)
000000  f44f7080          MOV      r0,#0x100
;;;290    {
;;;291      /*!< Select the FLASH: Chip Select low */
;;;292      //sFLASH_CS_LOW();
;;;293    
;;;294      /*!< Send "Write Enable" instruction */
;;;295      SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|1<<8; //
000004  4907              LDR      r1,|L10.36|
000006  6108              STR      r0,[r1,#0x10]
;;;296    	SPI_FLASH->PHASE_DATA[0] = sFLASH_CMD_WREN;
000008  2006              MOVS     r0,#6
00000a  6308              STR      r0,[r1,#0x30]
;;;297    	SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT1|SPI_LE_MODE;
00000c  f2444001          MOV      r0,#0x4401
000010  6008              STR      r0,[r1,#0]
;;;298    	while(!(SPI_FLASH->SPCR & SPIF_DONE));
000012  bf00              NOP      
                  |L10.20|
000014  4803              LDR      r0,|L10.36|
000016  6800              LDR      r0,[r0,#0]
000018  f0000002          AND      r0,r0,#2
00001c  2800              CMP      r0,#0
00001e  d0f9              BEQ      |L10.20|
;;;299      /*!< Deselect the FLASH: Chip Select high */
;;;300      //sFLASH_CS_HIGH();
;;;301    }
000020  4770              BX       lr
;;;302    /**
                          ENDP

000022  0000              DCW      0x0000
                  |L10.36|
                          DCD      0x40018000

                          AREA ||i.hyhwSpiFlash_WritePage||, CODE, READONLY, ALIGN=2

                  hyhwSpiFlash_WritePage PROC
;;;149      */
;;;150    void hyhwSpiFlash_WritePage(UInt8* pBuffer, UInt32 WriteAddr, UInt16 NumByteToWrite)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;151    {
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
;;;152    	U8 Byte1,Byte2,Byte3;
;;;153    	// add by ryan
;;;154    	if( NumByteToWrite == 0)
00000c  b915              CBNZ     r5,|L11.20|
                  |L11.14|
;;;155    	{
;;;156    		return;
;;;157    	}
;;;158      /*!< Enable the write access to the FLASH */
;;;159      hyhwSpiFlash_WriteEnable();
;;;160    
;;;161      /*!< Select the FLASH: Chip Select low */
;;;162      //sFLASH_CS_LOW();
;;;163      SPI_FLASH->PHASE_CTRL[0] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|4<<8; 
;;;164    	Byte1 = 0xFF&(WriteAddr>>16);
;;;165    	Byte2 = 0xFF&(WriteAddr>>8);
;;;166    	Byte3 = 0xFF&(WriteAddr);
;;;167    	SPI_FLASH->PHASE_DATA[0] = (sFLASH_CMD_WRITE)|(Byte1<<8)|(Byte2<<16)|(Byte3<<24);
;;;168    
;;;169    	SPI_FLASH->PHASE_CTRL[1] = SPIF_PHASE_ACTION_TX | SPIF_MODE_SINGLE|(NumByteToWrite)<<8; //+2 ??crc,???????
;;;170    	
;;;171    	hyhwDma_Config(DMA_CHANNEL2,(U32)pBuffer,(U32)(&(SPI_FLASH->PHASE_DATA[1])),NumByteToWrite,DMA_SI,DMA_DNI,DMA_WIDTH_8_BIT,DMA_WIDTH_32_BIT,DMA_MEM_TO_PERIPHERAL_PERIPHERAL_CTRL);
;;;172    	SPI_FLASH->SPCR = FLASH_CLK_DIV | SPIF_STSRT | SPIF_PHASE_CNT2|SPIF_USE_DMA_EN|SPI_LE_MODE;
;;;173    	while(!(SPI_FLASH->SPCR & SPIF_DONE));
;;;174    
;;;175      /*!< Deselect the FLASH: Chip Select high */
;;;176      //sFLASH_CS_HIGH();
;;;177    
;;;178      /*!< Wait the end of Flash writing */
;;;179      hyhwSpiFlash_WaitForWriteEnd();
;;;180    	
;;;181    	hyhwSpiFlash_WriteDisable();
;;;182    }
00000e  b005              ADD      sp,sp,#0x14
000010  e8bd83f0          POP      {r4-r9,pc}
                  |L11.20|
000014  f7fffffe          BL       hyhwSpiFlash_WriteEnable
000018  f44f6080          MOV      r0,#0x400             ;163
00001c  491a              LDR      r1,|L11.136|
00001e  6108              STR      r0,[r1,#0x10]         ;163
000020  f3c44907          UBFX     r9,r4,#16,#8          ;164
000024  f3c42707          UBFX     r7,r4,#8,#8           ;165
000028  f00408ff          AND      r8,r4,#0xff           ;166
00002c  2002              MOVS     r0,#2                 ;167
00002e  ea402009          ORR      r0,r0,r9,LSL #8       ;167
000032  ea404007          ORR      r0,r0,r7,LSL #16      ;167
000036  ea406008          ORR      r0,r0,r8,LSL #24      ;167
00003a  6308              STR      r0,[r1,#0x30]         ;167
00003c  2000              MOVS     r0,#0                 ;169
00003e  ea402105          ORR      r1,r0,r5,LSL #8       ;169
000042  4811              LDR      r0,|L11.136|
000044  6141              STR      r1,[r0,#0x14]         ;169
000046  2005              MOVS     r0,#5                 ;171
000048  2102              MOVS     r1,#2                 ;171
00004a  2200              MOVS     r2,#0                 ;171
00004c  9201              STR      r2,[sp,#4]            ;171
00004e  e9cd2102          STRD     r2,r1,[sp,#8]         ;171
000052  9004              STR      r0,[sp,#0x10]         ;171
000054  2001              MOVS     r0,#1                 ;171
000056  462b              MOV      r3,r5                 ;171
000058  4a0b              LDR      r2,|L11.136|
00005a  3234              ADDS     r2,r2,#0x34           ;171
00005c  4631              MOV      r1,r6                 ;171
00005e  9000              STR      r0,[sp,#0]            ;171
000060  2002              MOVS     r0,#2                 ;171
000062  f7fffffe          BL       hyhwDma_Config
000066  f2445011          MOV      r0,#0x4511            ;172
00006a  4907              LDR      r1,|L11.136|
00006c  6008              STR      r0,[r1,#0]            ;172
00006e  bf00              NOP                            ;173
                  |L11.112|
000070  4805              LDR      r0,|L11.136|
000072  6800              LDR      r0,[r0,#0]            ;173
000074  f0000002          AND      r0,r0,#2              ;173
000078  2800              CMP      r0,#0                 ;173
00007a  d0f9              BEQ      |L11.112|
00007c  f7fffffe          BL       hyhwSpiFlash_WaitForWriteEnd
000080  f7fffffe          BL       hyhwSpiFlash_WriteDisable
000084  bf00              NOP      
000086  e7c2              B        |L11.14|
;;;183    
                          ENDP

                  |L11.136|
                          DCD      0x40018000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  flashBufP
                          %        4096
