; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\hyhwuart.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\hyhwuart.d --feedback=.\Obj\output.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Source\inc -I..\..\Driver\inc -IE:\00_Workspace\0608_AG16KSDE176_DemoBoard\SCM3_DVK\Project\RVMDK\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0 -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=513 -DARMCM3 --omf_browse=.\obj\hyhwuart.crf ..\..\Driver\src\hyhwUart.c]
                          THUMB

                          AREA ||i.hyhwUart_DeInit||, CODE, READONLY, ALIGN=2

                  hyhwUart_DeInit PROC
;;;90     *----------------------------------------------------------------------------*/
;;;91     void hyhwUart_DeInit(void)
000000  2000              MOVS     r0,#0
;;;92     {
;;;93     	
;;;94       USART->CR = 0x0;                                        /* disable UART */
000002  4904              LDR      r1,|L1.20|
000004  6308              STR      r0,[r1,#0x30]
;;;95      	
;;;96     	USART->ICR = 0x0;                                       /* clear IRQ */
000006  6448              STR      r0,[r1,#0x44]
;;;97       
;;;98       USART->IMSC = 0 ;                            					 /* 默认关闭所有中断*/
000008  6388              STR      r0,[r1,#0x38]
;;;99       
;;;100      USART->CR = 0;//USART_CR_RECEIVE_EN|USART_CR_TRANSMIT_EN|USART_CR_UART_EN;                                      /* enable UART */	 
00000a  6308              STR      r0,[r1,#0x30]
;;;101      USART->DMACR = 0x02; //DMA RX,TX enable.
00000c  2002              MOVS     r0,#2
00000e  6488              STR      r0,[r1,#0x48]
;;;102      //hyhwUart__IntConfig(USART_IT_RX, ENABLE);								/* 只打开接收中断 */
;;;103      
;;;104    	
;;;105    }
000010  4770              BX       lr
;;;106    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40017000

                          AREA ||i.hyhwUart_IRQ||, CODE, READONLY, ALIGN=2

                  hyhwUart_IRQ PROC
;;;141    *----------------------------------------------------------------------------*/
;;;142    void hyhwUart_IRQ(void)
000000  b500              PUSH     {lr}
;;;143    {
;;;144    	U8 ch;
;;;145    	U16 reg_mis;
;;;146    	reg_mis = USART->MIS;
000002  4806              LDR      r0,|L2.28|
000004  6c00              LDR      r0,[r0,#0x40]
000006  b283              UXTH     r3,r0
;;;147    	if (reg_mis & USART_IT_RX) 
000008  f0030010          AND      r0,r3,#0x10
00000c  b128              CBZ      r0,|L2.26|
;;;148      	{
;;;149        	ch = USART->DR;
00000e  4803              LDR      r0,|L2.28|
000010  6800              LDR      r0,[r0,#0]
000012  b2c2              UXTB     r2,r0
;;;150        	hyhwUart_SendCh(ch);
000014  4610              MOV      r0,r2
000016  f7fffffe          BL       hyhwUart_SendCh
                  |L2.26|
;;;151        }
;;;152    }	
00001a  bd00              POP      {pc}
;;;153    
                          ENDP

                  |L2.28|
                          DCD      0x40017000

                          AREA ||i.hyhwUart_Init||, CODE, READONLY, ALIGN=2

                  hyhwUart_Init PROC
;;;59     *----------------------------------------------------------------------------*/
;;;60     U32 hyhwUart_Init(hyhwUart_Baudrate_en baudrate,
000000  b5f0              PUSH     {r4-r7,lr}
;;;61                                       hyhwUart_DataBits_en databits,
;;;62                                       hyhwUart_StopBits_en stopbits,
;;;63                                       hyhwUart_Parity_en   parity)
;;;64     {
000002  4604              MOV      r4,r0
;;;65     	U32 div;
;;;66     
;;;67       USART->CR = 0x0;                                        /* disable UART */
000004  2000              MOVS     r0,#0
000006  4e16              LDR      r6,|L3.96|
000008  6330              STR      r0,[r6,#0x30]
;;;68       div = (int)((HYHW_APB_CLOCK/baudrate) * 1000) / 16;
00000a  4e16              LDR      r6,|L3.100|
00000c  fbb6f6f4          UDIV     r6,r6,r4
000010  f44f777a          MOV      r7,#0x3e8
000014  fb06f007          MUL      r0,r6,r7
000018  17c6              ASRS     r6,r0,#31
00001a  eb007616          ADD      r6,r0,r6,LSR #28
00001e  1135              ASRS     r5,r6,#4
;;;69     	USART->IBRD = div/1000;                                 /* configure baud rate UARTFBRD */
000020  4638              MOV      r0,r7
000022  fbb5f0f0          UDIV     r0,r5,r0
000026  4e0e              LDR      r6,|L3.96|
000028  6270              STR      r0,[r6,#0x24]
;;;70     	USART->FBRD = ((div%1000)*64+500)/1000;                 /* configure baud rate UARTFBRD */
00002a  4638              MOV      r0,r7
00002c  fbb5f6f0          UDIV     r6,r5,r0
000030  fb005016          MLS      r0,r0,r6,r5
000034  107e              ASRS     r6,r7,#1
000036  eb061080          ADD      r0,r6,r0,LSL #6
00003a  0076              LSLS     r6,r6,#1
00003c  fbb0f0f6          UDIV     r0,r0,r6
000040  4e07              LDR      r6,|L3.96|
000042  62b0              STR      r0,[r6,#0x28]
;;;71     	
;;;72     	USART->LCR_H = databits|stopbits|parity;                /*这里把fifo  disable了 */
000044  ea410002          ORR      r0,r1,r2
000048  4318              ORRS     r0,r0,r3
00004a  62f0              STR      r0,[r6,#0x2c]
;;;73     	
;;;74     	USART->ICR = 0x0;                                       /* clear IRQ */
00004c  2000              MOVS     r0,#0
00004e  6470              STR      r0,[r6,#0x44]
;;;75       
;;;76       USART->IMSC = 0 ;                            					 /* 默认关闭所有中断*/
000050  63b0              STR      r0,[r6,#0x38]
;;;77       
;;;78       USART->CR = USART_CR_RECEIVE_EN|USART_CR_TRANSMIT_EN|USART_CR_UART_EN|USART_CR_CTS_EN|USART_CR_RTS_EN;                                      /* enable UART */	 
000052  f24c3001          MOV      r0,#0xc301
000056  6330              STR      r0,[r6,#0x30]
;;;79     	//USART->CR = USART_CR_RECEIVE_EN|USART_CR_TRANSMIT_EN|USART_CR_UART_EN;                                      /* enable UART */	 
;;;80       USART->DMACR = 0x02; //DMA RX,TX enable.
000058  2002              MOVS     r0,#2
00005a  64b0              STR      r0,[r6,#0x48]
;;;81       //hyhwUart__IntConfig(USART_IT_RX, ENABLE);								/* 只打开接收中断 */
;;;82       
;;;83     	return(HY_OK);  
00005c  2000              MOVS     r0,#0
;;;84     }
00005e  bdf0              POP      {r4-r7,pc}
;;;85     
                          ENDP

                  |L3.96|
                          DCD      0x40017000
                  |L3.100|
                          DCD      0x04c4b400

                          AREA ||i.hyhwUart_SendCh||, CODE, READONLY, ALIGN=2

                  hyhwUart_SendCh PROC
;;;127    *----------------------------------------------------------------------------*/
;;;128    U32 hyhwUart_SendCh(unsigned char ch)
000000  4601              MOV      r1,r0
;;;129    {
;;;130    	
;;;131    	while (!((USART->FR)&USART_FR_TRANSMIT_FIFO_EMPTY));                          // wait until the transmit FIFO is empty
000002  bf00              NOP      
                  |L4.4|
000004  4804              LDR      r0,|L4.24|
000006  6980              LDR      r0,[r0,#0x18]
000008  f0000080          AND      r0,r0,#0x80
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L4.4|
;;;132    	USART->DR = ch;	
000010  4801              LDR      r0,|L4.24|
000012  6001              STR      r1,[r0,#0]
;;;133    	return(HY_OK);
000014  2000              MOVS     r0,#0
;;;134    }	
000016  4770              BX       lr
;;;135    
                          ENDP

                  |L4.24|
                          DCD      0x40017000

                          AREA ||i.hyhwUart__IntConfig||, CODE, READONLY, ALIGN=2

                  hyhwUart__IntConfig PROC
;;;112    *----------------------------------------------------------------------------*/
;;;113    void hyhwUart__IntConfig(U16 USART_IT, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;114    {
;;;115      if (NewState == ENABLE)
000002  d105              BNE      |L5.16|
;;;116        USART->IMSC |= USART_IT;
000004  4a05              LDR      r2,|L5.28|
000006  6b92              LDR      r2,[r2,#0x38]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L5.28|
00000c  639a              STR      r2,[r3,#0x38]
00000e  e004              B        |L5.26|
                  |L5.16|
;;;117      else
;;;118        USART->IMSC &= ~USART_IT;
000010  4a02              LDR      r2,|L5.28|
000012  6b92              LDR      r2,[r2,#0x38]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L5.28|
000018  639a              STR      r2,[r3,#0x38]
                  |L5.26|
;;;119    }
00001a  4770              BX       lr
;;;120    
                          ENDP

                  |L5.28|
                          DCD      0x40017000
